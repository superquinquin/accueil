import json
from os import environ
from typing import List, Dict, Union
import argparse


class Config(object):
    # FLASK
    SECRET_KEY: str  = environ.get('SECRET_KEY') or 'aaaa'
    STATIC_URL: str = '/static'
    APPLICATION_ROOT: str = '/'

    # FLASK-SOCKETIO
    CORS_ALLOWED_ORIGINS: Union[str, List[str]] = '*'                               # SOCKETIO :: WILDCARD *; IDEAL LIST(URL)
    
    ADDRESS: str = environ.get('ERPPEEK_ADDRESS', '00.000.000.000')                  # SERVER IP ADDRESS
    
    # ERPPEEK API
    API_URL: str = environ.get('ERPPEEK_API_URL', 'https://production.com')
    API_DB: str = environ.get('ERPPEEK_API_DB', 'production')
    API_VERBOSE: bool = False

    ## SERVICE ACCOUNT
    SERVICE_ACCOUNT_LOGGIN: str = environ.get('ERPPEEK_SERVICE_ACCOUNT_LOGGIN', 'aa@mail.com')
    SERVICE_ACCOUNT_PASSWORD: str = environ.get('ERPPEEK_SERVICE_ACCOUNT_PASSWORD', 'mdp')  


    # FILE PATH
    BACKUP_FILENAME: str = './application/backup.pickle'
    WHITELIST_FILENAME: str = './application/whitelist.txt'
    LOG_FILENAME: str = './log/log.log'
    JSON_CONFIG_FILENAME: str = './application/static/js/config.js'
    

    # APP
    ACCPT_EARLY_ENTRANCE: int = 15 #min, fetch floor limit
    ACCPT_LATE_ENTRANCE: int = 0 #min, fetch ceiling limit

    @classmethod
    def define_as_config(self):
        """Standart config object pointing towards selected config references"""
        
        return self
    

class ProductionConfig(Config):
    # FLASK
    ENV: str = 'production'
    DEBUG: bool = False
    TESTING: bool = False
    TEMPLATES_AUTO_RELOAD: bool = False

    # FLASK-SOCKETIO
    ENGINEIO_LOGGER: bool = True
    LOGGER: bool = True
 

class StagingConfig(Config):
    # FLASK
    ENV: str = 'development'
    DEBUG: bool = True
    TESTING: bool = True
    TEMPLATES_AUTO_RELOAD: bool = True

    # FLASK-SOCKETIO
    ENGINEIO_LOGGER: bool = True
    LOGGER: bool = True

class DevelopmentConfig(Config):
    # FLASK
    ENV: str = 'development'
    DEBUG: bool = False
    TESTING: bool = False
    TEMPLATES_AUTO_RELOAD: bool = True

    # FLASK-SOCKETIO
    ENGINEIO_LOGGER: bool = False
    LOGGER: bool = True

    # ERPPEEK API
    ADDRESS: str = 'http://localhost:5000'          # 127.0.0.1:5000     # LOCALHOST
    API_URL: str = 'url'
    API_DB: str = 'db_name'
    API_VERBOSE: bool = False


class ClientJsonConfig(object):
  
  @classmethod
  def _to_dict(self, config: object, subconfig: object) -> Dict[str, Union[str, bool, int]]:
    """__dict__ is not serialisable. Can't be parsed as Json"""

    return  dict([(k, v) for k, v in 
            list(config.__dict__.items()) + 
            list(subconfig.__dict__.items()) 
            if (k.startswith('ADDRESS'))])

  @classmethod
  def to_json(self, config: object, subconfig: object):
    """Build JSON client config"""
    
    with open(config.JSON_CONFIG_FILENAME, 'w') as js:
      js.write('var config = ')
      json.dump(self._to_dict(config, subconfig), js)
      js.write(';')


configDict = {
  'production': ProductionConfig,
  'staging': StagingConfig,
  'dev': DevelopmentConfig
}


def parser():
  parser = argparse.ArgumentParser(description='choose config')
  parser.add_argument('--config', choices=['dev', 'staging', 'production'],
                      help= 'add config setup dev, staging or production')
  args = parser.parse_args()

  return args



def define_config(config_name: Union[None, str]=None):
  if config_name is None:
    config_name = environ.get('APP_CONFIG', 'dev')
  
  config = configDict[config_name]
      
  return config


def define_client_config(config):
  
  ClientJsonConfig.to_json(config= Config, 
                      subconfig= config)